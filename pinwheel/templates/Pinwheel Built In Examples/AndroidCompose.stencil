import androidx.compose.ui.graphics.Color

{% for item in items %}
    {% if item.colorItem %}
val {{ item.name }} = Color({% colorAsHexARGB item.colorItem.color.light %})
        {% if item.colorItem.color.dark %}
val {{ item.name }}Dark = Color({% colorAsHexARGB item.colorItem.color.dark %})
        {% endif %}
        {% if item.colorItem.color.highContrast %}
val {{ item.name }}HighContrast = Color({% colorAsHexARGB item.colorItem.color.highContrast %})
        {% endif %}
        {% if item.colorItem.color.darkHighContrast %}
val {{ item.name }}DarkHighContrast = Color({% colorAsHexARGB item.colorItem.color.darkHighContrast %})
        {% endif %}
    {% elif item.colorSet %}
        {% for color in item.colorSet.colors %}
val {{ item.name }}{{ color.name }} = Color({% colorAsHexARGB color.light %})
            {% if color.dark %}
val {{ item.name }}{{ color.name }}Dark = Color({% colorAsHexARGB color.dark %})
            {% endif %}
            {% if color.highContrast %}
val {{ item.name }}{{ color.name }}HighContrast = Color({% colorAsHexARGB color.highContrast %})
            {% endif %}
            {% if color.darkHighContrast %}
val {{ item.name }}{{ color.name }}DarkHighContrast = Color({% colorAsHexARGB color.darkHighContrast %})
            {% endif %}
        {% endfor %}
    {% elif item.number %}
val {{ item.name }} = {{ item.number.value.light }}
        {% if item.number.value.dark %}
val {{ item.name }}Dark = {{ item.number.value.dark }}
        {% endif %}
        {% if item.number.value.highContrast %}
val {{ item.name }}HighContrast = {{ item.number.value.highContrast }}
        {% endif %}
        {% if item.number.value.darkHighContrast %}
val {{ item.name }}DarkHighContrast = {{ item.number.value.darkHighContrast }}
        {% endif %}
    {% elif item.boolean %}
val {{ item.name }} = {{ item.boolean.value.light }}
        {% if item.boolean.value.dark %}
val {{ item.name }}Dark = {{ item.boolean.value.dark }}
        {% endif %}
        {% if item.boolean.value.highContrast %}
val {{ item.name }}HighContrast = {{ item.boolean.value.highContrast }}
        {% endif %}
        {% if item.boolean.value.darkHighContrast %}
val {{ item.name }}DarkHighContrast = {{ item.boolean.value.darkHighContrast }}
        {% endif %}
    {% elif item.string %}
val {{ item.name }} = "{{ item.string.value.light }}"
        {% if item.string.value.dark %}
val {{ item.name }}Dark = "{{ item.string.value.dark }}"
        {% endif %}
        {% if item.string.value.highContrast %}
val {{ item.name }}HighContrast = "{{ item.string.value.highContrast }}"
        {% endif %}
        {% if item.string.value.darkHighContrast %}
val {{ item.name }}DarkHighContrast = "{{ item.string.value.darkHighContrast }}"
        {% endif %}
    {% elif item.shadowItem %}
val {{ item.name }} = {%+ shadowAsKotlinPinwheelShadow item.shadowItem.shadow.light +%} 
        {% if item.shadowItem.shadow.dark %}
val {{ item.name }}Dark = {%+ shadowAsKotlinPinwheelShadow item.shadowItem.shadow.dark +%} 
        {% endif %}
        {% if item.shadowItem.shadow.highContrast %}
val {{ item.name }}HighContrast = {%+ shadowAsKotlinPinwheelShadow item.shadowItem.shadow.highContrast +%} 
        {% endif %}
        {% if item.shadowItem.shadow.darkHighContrast %}
val {{ item.name }}DarkHighContrast = {%+ shadowAsKotlinPinwheelShadow item.shadowItem.shadow.darkHighContrast +%} 
        {% endif %}
    {% elif item.shadowSet %}
        {% for shadow in item.shadowSet.shadows %}
val {{ item.name }}{{ shadow.name }} = {%+ shadowAsKotlinPinwheelShadow shadow.light +%} 
            {% if shadow.dark %}
val {{ item.name }}{{ shadow.name }}Dark = {%+ shadowAsKotlinPinwheelShadow shadow.dark +%} 
            {% endif %}
            {% if shadow.highContrast %}
val {{ item.name }}{{ shadow.name }}HighContrast = {%+ shadowAsKotlinPinwheelShadow shadow.highContrast +%} 
            {% endif %}
            {% if shadow.darkHighContrast %}
val {{ item.name }}{{ shadow.name }}DarkHighContrast = {%+ shadowAsKotlinPinwheelShadow shadow.darkHighContrast +%} 
            {% endif %}
        {% endfor %}
    {% endif %}
{% endfor %}

data class PinwheelShadow(
    val x: Double,
    val y: Double,
    val blur: Double,
    val spread: Double,
    val color: Color
) {
    companion object {
        // if using a call like asFrameworkPaint().setShadowLayer(blur,x,y,color) this is the scale factor to use
        const val BLUR_SCALE_FACTOR = 0.85
    }

    val scaledBlur: Double
        get() = blur * BLUR_SCALE_FACTOR
}
